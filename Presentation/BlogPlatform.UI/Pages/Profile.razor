@page "/profile"
@attribute [Authorize]

@using BlogPlatform.UI.Models;
@using BlogPlatform.UI.Extensions;

@inject AuthenticationStateProvider _authStateProvider
@inject NavigationManager _navigationManager
@inject IStringLocalizer<Profile> _locale

<style>
    html, body {
        height: 100%;
    }
</style>

<div class="d-flex justify-content-center align-items-center w-100 h-100">
    @if (userInfo is not null)
    {
        <MudPaper Elevation="5">
            <MudTooltip Text="@_locale["HomePage"]">
                <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" Link="/" />
            </MudTooltip>
            <div class="pa-5">
                <MudText>
                    Hello, @userInfo.Username! (@userInfo.Email)
                </MudText>
                <div class="mt-5 d-flex justify-content-center">
                    <MudButton @onclick="SignOut" Size="Size.Large" Variant="Variant.Filled" Color="Color.Primary">
                        @_locale["SignOut"]
                    </MudButton>
                </div>
            </div>
        </MudPaper>
    }
    else
    { 
        <Loading />
    }
</div>

@code {
    private User userInfo;

    protected override async Task OnInitializedAsync()
    {
        //userInfo = await this.MapUserFromCurrentClaims();
    }

    public async Task SignOut()
    {
        //var provider = _authStateProvider as JwtAuthenticationStateProvider;
        //await provider.UnauthenticateAsync();
        //_navigationManager.NavigateTo("/");
        _navigationManager.NavigateTo("/logout");
    }

    private async Task<User> MapUserFromCurrentClaims()
    {
        var authState = await _authStateProvider.GetAuthenticationStateAsync();

        User user = new()
        {
            Username = authState.User.FindFirst("unique_name").Value,
            Email = authState.User.FindFirst("email").Value
        };

        return user;
    }
}
