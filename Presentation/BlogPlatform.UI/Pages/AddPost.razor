@page "/author/new"
@attribute [Authorize(Roles = "Author, Admin")]

@inject IPostService _postService
@inject IFileService _fileService
@inject IContentAnalysisService _contentAnalysisService

@inject ISnackbar _snackbar

@inject NavigationManager _navigationManager 
@inject IStringLocalizer<AddPost> _locale

<AuthorBar />

<div class="px-5 bg-white">
    <MudBreadcrumbs Items="breadcrumbItems" Separator=">" />
    <MudText Class="mb-4" Typo="Typo.h5">@_locale["NewPost"]</MudText>
    <EditForm Model="newPost" OnValidSubmit="PublishPost">
        <FluentValidationValidator />

        <MudTextField
            @bind-Value="newPost.Title"
            Class="bg-white mt-4 mb-2"
            Label="@_locale["TitleLabel"]"
            Variant="Variant.Outlined"
            Margin="Margin.Dense"
            For="@(() => newPost.Title)"
        />

        <MudTextField
            @bind-Value="newPost.Content"
            Class="bg-white mt-3 mb-2"
            Label="@_locale["ContentLabel"]"
            Variant="Variant.Outlined"
            Margin="Margin.Dense"
            Lines="15"
            For="@(() => newPost.Content)"
        />

        <MudTextField
            @bind-Value="tagsLine"
            Class="bg-white mt-3 mb-2"
            Style="width: 200px;"
            Label="@_locale["TagsLabel"]"
            Adornment="Adornment.End"
            AdornmentIcon="@Icons.Material.Filled.Add"
            OnAdornmentClick="AddTags"
            Margin="Margin.Dense"
        />

        <ValidationMessage For="@(() => newPost.Tags)" />

        <MudChipSet Class="my-4" AllClosable="true" OnClose="RemoveTagFromClosedChip"
                    SelectedChipChanged="CopyTagNameFromChip">
            @foreach (string tag in newPost.Tags)
            {
                <MudChip Text="@tag"></MudChip>
            }
        </MudChipSet>

        <div class="my-5 d-flex justify-content-between">
            <div class="d-flex-inline align-content-center">
                <MudButton Class="mr-4" Color="Color.Dark" Variant="Variant.Filled"
                           StartIcon="@Icons.Material.Filled.Image"
                           HtmlTag="label" for="thumbnailInput">
                    @(currentThumbnail is null ? _locale["UploadThumbnail"] : _locale["ChangeThumbnail"])
                </MudButton>

                @if (currentThumbnail is not null)
                {
                    <span>@currentThumbnail.Name (@currentThumbnail.Size @_locale["FileBytes"])</span>
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small"
                                   Color="Color.Error" OnClick="ClearThumbnail" />
                }
            </div>

            <MudButton Color="Color.Dark" Variant="Variant.Filled"
                       Disabled="isPublishing" ButtonType="ButtonType.Submit">
                @_locale["Publish"]

                @if (isPublishing)
                {
                    <MudProgressCircular Class="ml-2" Indeterminate="true" Size="Size.Small" />
                }
            </MudButton>
        </div>

        <InputFile id="thumbnailInput" accept=".jpg, .jpeg, .png" hidden
                   OnChange="SaveThumnailForPublishing" />
    </EditForm>
</div>

@code {
    List<BreadcrumbItem> breadcrumbItems;
    IBrowserFile currentThumbnail;

    Models.Post newPost = new() { Tags = new HashSet<string>() };

    string tagsLine;
    bool isPublishing;

    protected override void OnInitialized()
    {
        _snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;

        breadcrumbItems = new List<BreadcrumbItem>()
        {
            new(_locale["Posts"], "/author"),
            new(_locale["NewPost"], "/author/new")
        };
    }

    void SaveThumnailForPublishing(InputFileChangeEventArgs e)
    {
        currentThumbnail = e.File;
    }

    void ClearThumbnail()
    {
        currentThumbnail = null;
    }

    void AddTags()
    {
        if (tagsLine is null)
        {
            return;
        }

        string[] tagNames = tagsLine.Split(';', StringSplitOptions.RemoveEmptyEntries);
        tagsLine = null;

        foreach (string tag in tagNames)
        {
            newPost.Tags.Add(tag.Trim());
        }
    }

    void CopyTagNameFromChip(MudChip chip)
    {
        tagsLine = chip?.Text;
    }

    void RemoveTagFromClosedChip(MudChip chip)
    {
        newPost.Tags.Remove(chip.Text);
    }

    async Task PublishPost()
    {
        try
        {
            isPublishing = true;

            var base64Image = await _fileService.GetImageBase64StringAsync(currentThumbnail);
            var analysisRequest = new PostAnalysisRequest
            {
                Title = newPost.Title,
                Content = newPost.Content,
                TagsString = string.Join(' ', newPost.Tags),
                ImageString = base64Image
            };

            var analysisResponse = await _contentAnalysisService.AnalyzePostAsync(analysisRequest);

            if (!analysisResponse.Passed)
            {
                _snackbar.Add(analysisResponse.ModerationResult, Severity.Error);
                return;
            }

            if (currentThumbnail is not null)
            {
                newPost.ThumbnailPath = await _fileService.PublishFile(currentThumbnail);
            }

            var publishedPost = await _postService.PublishPostAsync(newPost);
            await _postService.SetTagsOfPostAsync(publishedPost.Id, newPost.Tags);
            _navigationManager.NavigateTo("/author");
        }
        catch (HttpRequestException)
        {
            _snackbar.Add(_locale["PublishError"], Severity.Error);
        }
        finally
        {
            isPublishing = false;
        }
    }
} 